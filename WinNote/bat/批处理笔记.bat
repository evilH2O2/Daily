
&     顺序执行多条语句，不管命令是否执行成功

&&    当碰到执行出错的命令后将不执行后面的命令


||      顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令


|       管道命令，将前面一条命令的执行结果传递给后面一条命令继续执行  type 1.text | find "80"   表示先执行  type 命令，对其输出的结果执行后面的 find 命令

<       从文件中获得输入信息，而不是从屏幕上

::      注释内容

%0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*       命令行传递给批处理的参数   %0 批处理文件本身 %1 第一个参数 %9 第九个参数%*         从第一个参数开始的所有参数
______________________________________________________________________________________________
pause 与pause>nul

pause 暂停命令，执行时会在命令行窗口显示“请按任意键继续. . .”并等待你按键。
pause > nul的作用是同样的，区别是不显示“请按任意键继续. . .”这些字，nul相当于空文件，把这些文字隐去了。同样是等待你按键，常配合 echo 使用 
———————————————————————————————————————————————————————————————————————————————————————————————
choice     从屏幕获取输入的 选项  [YN] 
choice  /C  UN /D U /T 3 /M help  
设置一个  UN选项 ，U选项有一个3秒的默认选择，3秒后默认选择为 U    /M为选项前要显示的文本
————————————————————————————————————————————————————————————————————————————————————————————
%0  ~ %9  %*   参数，从外部获取参数

/*
echo %1

> text.bat JK  //第一个参数

输出：JK
*/

%0  bat文件自身
%1  第一个参数
%2  第二个参数
... ...
%9  第九个参数

%* 除0 外的所有参数
————————————————————————————————
通配符

* 代表全部字符 *.jpg *.txt

? 代表单个字符 ????.txt 只用4个字符作为文件名的文本文件,包括4个以下

——————————————————————————————————————————————————————————————————————————————————————————

set 变量


程序里设置变量
set var=Hello World!

echo %var%

pause


读入的方法设置变量

set /p ac=请输入一个变量:  
echo %ac%

注意:set /p ac=请输入一个变量: [等号处不能加空格]

——————————————————————————————————————————————————————————————————————————————————————————
for 循环

在cmd 窗口中：for %I in (command1) do command2 

在批处理文件中：for %%I in (command1) do command2 

注意：for 后 可以 加 /f /r /l /d 这四个 参数

for 语句的形式变量 I，可以换成 26 个字母中的任意一个，这些字母会区分大小写，也就是说，%%I 和%%i 会被认为不是同一个变量；形式变量 I还可以换成其他的字符，但是，为了不与批处理中的%0～%
9 这10 个形式变量发生冲突，请不要随意把%%I 替换为%%0  ～%%9 中的任意一个；

in 和do 之间的command1 表示的字符串或变量可以是一个，也可以是多个，每一个字符串或变量，我们称之为一个元素，每个元素之间，用空格键、跳格键、逗号、分号或等号分隔

for 语句依次提取 command1 中的每一个元素，把它的值赋予形式变量I,带到do 后的command2 中参与命令的执行；并且每次只提取一个元素，然后执行一次 do 后的命令语句，而无论这个元素是否被带到  
command2 中参与了command2 的运行；当执行完一次do 后的语句之后，再提取command1 中的下一个元素，再执行一次 command2，如此循环，直到 command1 中的所有元素都已经被提取完毕，该for ；
语句才宣告执行结束


-------------------
例:
for /d %%i in (*) do echo %%i

for %%A in (*.py) do echo %%A


for %%A in (????.bat) do (
	echo %%A
)

------------------
for 的四个参数

/f /r /l /d

FOR /D %variable IN (set) DO command [command-parameters]

[*]如果集中包含通配符，则指定与目录名匹配，而不与文件名匹配。

只匹配目录或文件夹，不匹配文件

for /d %%A in (*) do echo %%A
for /d %%A in (NFCat) do echo %%A



FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]
[*]检查以 [drive:]path 为根的目录树，指向每个目录中的 FOR 语句。
   如果在 /R 后没有指定目录规范，则使用当前目录。如果集仅为一个单点(.)字符，
   则枚举该目录树。

for /r D: %%A in (.) do echo %%A

枚举出 D 盘下所有文件夹与文件

for /r D: %%A in (*.jpg) do echo %%A

枚举出 D 盘下所有以.jpg 为后缀的文件

for /r D:C %%A in (*) do echo %%A

枚举出 D 盘 C 文件夹下的所有文件

for /r D:\My_Jobs\小鸟酱 %%A in (lululu) do echo %%A

枚举出 D:\My_Jobs\小鸟酱 文件夹下的所有文件名为 lululu 的文件

   
   
FOR /L %variable IN (start,step,end) DO command [command-parameters]
[*]该集表示以增量形式从开始到结束的一个数字序列。因此，(1,1,5)将产生序列
    1 2 3 4 5，(5,-1,1)将产生序列(5 4 3 2 1)
	
for /l %%A in (1,1,6) do echo %%A

for /l %%A in (6,-1,1) do echo %%A
—————————————————————————————————————————————————————————————————————————————————————————————












